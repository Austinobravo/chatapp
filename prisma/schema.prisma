// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}
// !Password1 - austinobravo@gmail.com
model User{
  id String @id @default(uuid())
  email String @unique
  username String
  image String?
  password String 

  requests Requests[]
  friends Friends[]
  messages Message[]
  conversations Conversations[]
  conversationsMembers ConversationsMembers[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Requests{
  id String @id @default(uuid())

  isaccepted Boolean @default(false)
  sender String @unique
  receiver String
  user User @relation(fields: [receiver], references: [email], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Friends{
  id String @id @default(uuid())

  isaccepted Boolean @default(false)
  sender String @unique
  receiver String
  user User @relation(fields: [receiver], references: [email], onDelete: Cascade)
  conversationId String
  conversation Conversations @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversations{
  id String @id @default(uuid())
  name String?

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  friends Friends[]
  lastMessage String?
  isGroup Boolean @default(false)
  message Message[]
  conversationMembers ConversationsMembers[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ConversationsMembers{
  id String @id @default(uuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lastMessage String?
  
  conversationId String
  conversation Conversations[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message{
  id String @id @default(uuid())
  

  conversationId String
  conversation Conversations @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  message String

  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
